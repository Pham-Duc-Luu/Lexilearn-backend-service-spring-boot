spring.config.import=optional:file:local.env[.properties]
spring.application.name=backend_server
apiGatewayUrl=${API_GATEWAY_SERVER}
server.port=${PORT}
application.security.api-key=${API_KEY}
api.key=${API_KEY}
spring.google.client.id=${GOOGLE_CLIENT_ID}
spring.google.client.secret=${GOOGLE_CLIENT_SECRET}
spring.front.end.client.url=${FRONT_END_CLIENT_SERVER}
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USER}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
springdoc.api-docs.path=/docs/api-docs
springdoc.swagger-ui.path=/docs/swagger-ui.html
apiPrefix=/api/v1
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
dgs.graphql.path=/graphql
spring.threads.virtual.enabled=true
dgs.graphql.virtualthreads.enabled=true
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
logging.level.org.hibernate=ERROR
spring.jpa.properties.hibernate.format_sql=false
private.key=${PRIVATE_KEY}
private.time=${PRIVATE_TIME}
public.key=${PUBLIC_KEY}
public.time=${PUBLIC_TIME}
## user jwt token
## access-token's jwt algorithms : RSA256 | RSA384 | RSA512 | ECDSA256 | ECDSA384 | ECDSA512
user.jwt.access-token.private-key=${ACCESS_TOKEN_PRIVATE_KEY}
user.jwt.access-token.public-key=${ACCESS_TOKEN_PUBLIC_KEY}
user.jwt.access-token.private-key.path=jwt-key/private.pem
user.jwt.access-token.public-key.path=jwt-key/public.pem
user.jwt.access-token.duration.in.hour=${ACCESS_TOKEN_DURATION}
user.jwt.access-token.algorithm=RSA256
## refresh-token's jwt algorithms : RSA256 | RSA384 | RSA512 | ECDSA256 | ECDSA384 | ECDSA512
user.jwt.refresh-token.private-key=${REFRESH_TOKEN_PRIVATE_KEY}
user.jwt.refresh-token.public-key=${REFRESH_TOKEN_PUBLIC_KEY}
user.jwt.refresh-token.private-key.path=jwt-key/private.pem
user.jwt.refresh-token.public-key.path=jwt-key/public.pem
user.jwt.refresh-token.duration.in.hour=${REFRESH_TOKEN_DURATION}
user.jwt.refresh-token.algorithm=RSA256
##
mail.host=${MAIL_HOST}
mail.port=${MAIL_PORT}
mail.username=${MAIL_USER_NAME}
mail.password=${MAIL_USER_PASSWORD}
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
#
opt.expired.in=60
##
spring.task.execution.pool.core-size=5
spring.task.execution.pool.max-size=50
spring.task.execution.pool.queue-capacity=100
##
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
## kafka topic
kafka.group.id=1caw3g
kafka.topic.lexilearn.desk=dbserver1.lexilearn_backend_database.Desk
kafka.es.index.desk.name=desks
## elasticsearch
elasticsearch.host=${ELASTICSEARCH_HOST}
elasticsearch.port=${ELASTICSEARCH_PORT}
spring.data.elasticsearch.repositories.enabled=true
spring.elasticsearch.rest.uris=http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
## microservice
service.media.url=${MEDIA_SERVER_URL}
service.media.api.key=${MEDIA_SERVER_API_KEY}